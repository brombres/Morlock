class PackageInfo
  PROPERTIES
    name     : String  # brombres/rogo, provider/app_name
    provider : String  # brombres
    app_name : String  # rogo
    repo     : String  # rogo
    version  : String  # null, 1.0, 1.0.0, etc.
    host     : String  # github.com
    folder   : String  # /opt/morlock/packages/brombres/rogo,            /opt/morlock/packages/provider/app_name
    filepath : String  # /opt/morlock/packages/brombres/rogo/rogo.rogue, /opt/morlock/packages/provider/app_name.rogue
    url      : String  # https://raw.githubusercontent.com/brombres/rogo/master/morlock/brombres/rogo.rogue
                       # protocol://domain/provider/repo/master/morlock/provider/app_name.rogue
    build_folder       : String   # /opt/morlock/build/brombres/rogo
    installed_versions : String[]
    using_local_script : Logical  # prevents pinging repo for updates

  METHODS
    method init( text:String, &is_script )
      if (is_script)
        using_local_script = true
        init( parse_package_name(text) )
        return
      else
        url = text
      endIf

      if (url.contains('@'))
        version = url.after_last('@')
        url .= before_last('@')
      endIf

      if (url.contains("://"))
        if (url.ends_with(".rogue"))
          # Direct link to the install script - get the package name from it
          local result = Process.run( "curl -fsSL " + url )
          if (not result.success) throw Error( "Download failed: " + url )

          local script = result->String
          using_local_script = true  # not exactly true but suppresses the later attempt to fetch the script

          local package_name = parse_package_name( script )
          provider = package_name.before_first('/')
          app_name = package_name.after_first('/')

          folder = "$/packages/$/$" (Morlock.HOME,provider,app_name)
          filepath = "$/$.rogue" (folder,app_name)

          if (not File(folder).is_folder)
            File( folder ).create_folder
          endIf
          File( filepath ).save( script )
          File( folder/"url.txt" ).save( url )

          File( folder/"cache.json" ).delete  # delete any existing cache

        else
          # URL of a repo
          local parts = url.extract_strings( "$://$/$" )
          if (not parts)
            local sample = "https://github.com/account/repo or https://raw.githubusercontent.com/account/repo/main/morlock/account/app_name.rogue"
            throw Error( ''Invalid URL "$" - expected e.g. "$".'' (url,sample) )
          endIf

          if (not url.ends_with(".rogue",&ignore_case))
            # URL was good enough to get started but is not the URL of a script.
            # Reconstruct URL later.
            url = null
          endIf

          # protocol = parts[0]
          host       = parts[1]
          local path = parts[2]

          app_name = File(path).filename.before_last('.')
          if (path.contains('/'))
            provider = path.before_first('/')
            repo = path.after_first('/').before_first('/')
          else
            provider = app_name
            repo = app_name
          endIf
        endIf

      else
        which (url.count('/'))
          case 0
            provider = url
            app_name = url
            repo     = url
            url = null
          case 1
            provider = url.before_first('/')
            app_name = url.after_first('/')
            repo     = app_name
            url = null
          case 2
            # Assume a shorthand URL
            # EITHER
            # - host/account/repo, AKA:
            # - host/provider/app-name
            # - github.com/brombres/rogue
            # OR
            # - provider/repo/app-name
            # - brombres/tools/xyz
            local parts = url.split('/')
            if (parts[0] == "github" or parts[0].contains('.'))
              host     = parts[0]
              provider = parts[1]
            else
              provider = parts[0]
              repo     = parts[1]
            endIf
            app_name = parts[2]
            url  = null
          others
            # Assume a URL that's missing the https:// protocol
            init( "https://"+url )
            return
        endWhich

      endIf

      if (not repo)     repo = app_name
      if (not name)     name = provider/app_name
      if (not folder)   folder = "$/packages/$/$" (Morlock.HOME,provider,app_name)
      if (not filepath) filepath = "$/$.rogue" (folder,app_name)

      if (not url)
        local url_filepath = folder/"url.txt"
        if (File(url_filepath).exists)
          url = String(File(url_filepath)).trimmed
        endIf
      endIf

      if (host)
        which (host)
          case "github": host = "github.com"
        endWhich
      else
        if (url) host = url.after_any("://").before_first('/')
        else     host = "github.com"
      endIf

      installed_versions = which{ File(folder).exists:File(folder).listing(&folders,&omit_path) || String[] }
      installed_versions.sort( (a,b) => VersionNumber(a) > b )

    method ensure_script_exists
      if (not File(filepath).exists) fetch_latest_script

    method fetch_latest_script
      println "[$]"(name)
      if (using_local_script) return

      if (not url)
        which (host)
          case "github.com"
            # Use the GitHub API to determine the default branch for the repo and the
            # capitalization of the Morlock folder.
            local cmd = ''curl -H "Accept: application/vnd.github.v3+json" ''
            cmd += "https://api.github.com/repos/$/$/contents"(provider,repo)
            #println "> " + cmd
            local result = Process.run( cmd, &env )
            if (not result.success)
              throw Error( "Unable to list default branch of 'github.com/$/$'."(provider,repo) )
            endIf

            local contents = JSON.parse( result->String )
            if (not contents.is_list)
              if (File(filepath).exists)
                # We're good with the copy we already have
                return
              else
                throw Error( "Repo does not exist: github.com/$/$"(provider,repo) )
              endIf
            endIf

            local folder_info = contents.first( $//name->String.equals("morlock",&ignore_case) )
            if (not folder_info)
              if (create_default_script(contents)) return
              throw Error( "No morlock/$.rogue install script exists in repo."(app_name) )
            endIf

            local branch = folder_info//url->String.after_last('?').after_last("ref=").before_first('&')
            if (not String.exists(branch)) branch = "main"

            url = "https://raw.githubusercontent.com/$/$/$/$/$.rogue"(provider,repo,branch,folder_info//name,app_name)

          others
            throw Error( "Morlock does not know how to construct $ URLs."(host) )

        endWhich
      endIf

      if (not File(folder).is_folder)
        File( folder ).create_folder
      endIf

      if (execute("curl -fsSL $ -o $" (url,File(filepath).esc), &quiet, &suppress_error))
        File( folder/"url.txt" ).save( url )
      else
        throw Error( "Can't find Morlock install script at:\n"+url )
      endIf

      File( folder/"cache.json" ).delete  # delete any existing cache

    method create_default_script( contents:Variant )->Logical
      local builder = String()
      builder.println "class $Package : Package" (app_name.capitalized)
      builder.println "  PROPERTIES"
      builder.println '    name = "$"' (name)

      local quiet = File(filepath).exists

      if (contents.first($//name=="Build.rogue"))
        # Contains Rogo Build.rogue
        # No other content needed
        if (not quiet) println "Using default install script for a Rogo-based project."
      elseIf (contents.first($//name=="setup.py"))
        if (not quiet) println "Using default install script for a Python-based project."
        local has_pip3 = System.find_executable("pip3")
        if (not (has_pip3 or System.find_executable("pip")))
          throw Error( "No morlock/$.rogue install script exists in repo. "...
            "Repo has a setup.py; install pip3 or pip in order to allow automatic "...
            "Morlock installation of this project."(app_name) )
        endIf
        builder.println @|
                         |  METHODS
                         |    method install
                         |      download
                         |      unpack
                         |      build
                         |
                         |    method build
                         |      localize pip
                         |      if (not pip)
                         |        throw error( "Python must be installed before Morlock can install [$]."(name) )
                         |      endIf
                         |
                         |      forEach (folder in File(".",&folders,&ignore_hidden).listing)
                         |        local setup_file = File(folder/"setup.py")
                         |        if (setup_file.exists)
                         |          local src = String(setup_file)
                         |          execute "$ && $ install --user ." (cd_cmd(folder),pip)
                         |          archive_folder = folder
                         |          return
                         |        endIf
                         |      endForEach #yay
                         |
                         |    method pip->String
                         |      if (System.find_executable("pip3")) return "pip3"
                         |      if (System.find_executable("pip"))  return "pip"
                         |      return null
                         |
                         |    method uninstall
                         |      localize pip
                         |      if (not pip)
                         |        throw error( "Python must be installed before Morlock can uninstall [$]."(name) )
                         |      endIf
                         |      execute "$ uninstall -y $" (pip,app_name)
      else
        return false
      endIf
      builder.println "endClass"

      File( folder ).create_folder
      File( "$/$.rogue"(folder,app_name) ).save( builder )
      File( folder/"cache.json" ).delete  # delete any existing cache

      return true

    method description->String
      local builder = String()
      builder.println "name:"+name
      builder.println "host:"+host
      builder.println "provider:"+provider
      builder.println "repo:"+repo
      builder.println "app_name:"+app_name
      builder.println "version:"+version
      builder.println "url:"+url
      builder.println "folder:"+folder
      builder.println "filepath:"+filepath
      builder.println "using_local_script:"+using_local_script
      return builder

    method execute( cmd:String, &suppress_error, &allow_sudo, &quiet )->Logical
      if (not quiet) println "> " + cmd
      if (0 == System.run(cmd)) return true

      if (allow_sudo)
        println "Error executing '$'; retrying with 'sudo'."(cmd)
        return execute( "sudo "+cmd, &=suppress_error )
      endIf

      if (suppress_error) return false
      throw Error( "Error executing:\n$"(cmd) )

    method package_args->Variant
      return @{ morlock_home:Morlock.HOME, version, script_filepath:filepath, host, repo }

    method parse_package_name( script:String )->String
      forEach (line in LineReader(script))
        if (line.contains("name"))
          local package_name = line.extract_string( ''*name = "$"*'' )
          if (not package_name) nextIteration

          if (package_name.contains('/')) return package_name
          else                            return package_name/package_name
        endIf
      endForEach

      throw Error( ''Failed to parse package name from PROPERTIES. Required: name = "provider/app-name"'' )

    method prepare_build_folder
      build_folder = "$/build/$/$" (Morlock.HOME,provider,app_name)
      if (File(build_folder).is_folder and File(build_folder).listing.count)
        File(build_folder).delete
      endIf
      if (not File(build_folder).is_folder)
        File( build_folder ).create_folder
      endIf
endClass

