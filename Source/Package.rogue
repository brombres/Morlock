uses Math/Best
uses Codec/Zip
uses Utility/VersionNumber

class Package
  # Note: the "current folder" (".") is a temporary build folder.
  PROPERTIES
    action            : String   # "install", "uninstall", "<custom>", ...
    args              : String[] # any command line args after action and package name
    name              : String   # "provider-name/app-name" ->  "brombres/helloworld"
    host              : String   # "github.com" etc.
    provider          : String   # "provider-name"          ->  "brombres"
    repo              : String   # "repo-name"              ->  "tools"
    app_name          : String   # "app-name"               ->  "helloworld"
    specified_version : String   # req version or null      ->  "1.2"
    version           : String   # selected v, best match   ->  "1.2.4"
    release_id        : Int32    # integer ID of selected release -> 12345678
    url               : String   # URL of .rogue script     ->  "https://github.com/.../morlock/app-name.rogue"
    morlock_home      : String   # Home folder for Morlock  ->  "/opt/morlock"     | "C:/Users/.../AppData/Local/Morlock"
    launcher_folder   : String   # Links/.bat files         ->  "/opt/morlock/bin" | "C:/.../Morlock/bin"
    package_folder    : String   # Morlock packages folder  ->  "/opt/morlock/packages" | "C:/.../Morlock/packages"
    install_folder    : String   # Install-to folder        ->  package_folder/"brombres/helloworld/1.0"
    bin_folder        : String   # Put executables here     ->  install_folder/"bin"
    archive_filename  : String   # Tar/zip w/in cur folder  ->  "helloworld-1.0.tar.gz"
    archive_folder    : String   # Name of unzipped folder  ->  "helloworld-1.0"

    releases          = @[]      # Auto-populated           ->  ["3.2.1"] (usually only 1 install at a time)
    assets            : Variant
    properties        : Variant    # Cmd line arg as JSON value. Note properties//command has parsed cmd line args
    cache             : Variant    # Arbitrary info table @{...} you can store values into, then call save_cache()

    is_unpacked       : String   # Internal flag

  METHODS
    method init
      # Can override this to add specific release()s. For example:
      #   release "https://raw.githubusercontent.com/.../xyz-1.0.tar.gz"
      scan_repo_releases

    method init( args:String[] )
      assert args.count
      init( JSON.parse(args.first) )

    method init( name, properties:Variant )
      init( properties )

    method init( properties )
      if (not name or name.count('/')>1)
        throw PackageError(
          File(properties//script_filepath).filename,
          ''Package name must be specified as a property. For example:\n\n  PROPERTIES\n    name = "provider/$"''...
          (File(properties//script_filepath).filename.before_last('.'))
        )
      endIf

      args = properties//command//args.to_list<<String>>
      if (args.count) args.remove_first  # removing package name from this 'args' list

      if (not name.contains('/')) name = name/name

      provider = name.before_first('/')
      app_name = name.after_first('/')

      action = properties//action
      morlock_home = properties//morlock_home
      host = properties//host
      repo = properties//repo
      launcher_folder = morlock_home/"bin"
      package_folder = "$/packages/$/$" (morlock_home,provider,app_name)

      local cache_file = File(package_folder/"cache.json")
      if (cache_file.exists)
        cache = JSON.load(cache_file)
      endIf
      if (not cache) cache = @{}

      if (properties//version)
        specified_version = properties//version
        version = specified_version
      endIf

      init

    method archive_folder->String
      if (@archive_folder) return @archive_folder

      local folders = File(".").listing(&folders)
      if (folders.count == 1)
        archive_folder = folders.first
        return @archive_folder
      endIf

      throw Error( '''archive_folder' can not be automatically determined. Set 'archive_folder = "filepath"' before using 'archive_folder' in other operations. A file .listing() using a known filename can help locate the folder - e.g. start with 'File(".").listing("*/KnownFilename.txt")'.'' )

      return null

    method assets->Variant
      if (@assets) return @assets

      local url = "https://api.github.com/repos/$/$/releases/$/assets"(provider,repo,release_id)
      local cmd = ''curl -fsSL -H "Accept: application/vnd.github.v3+json" '' + url
      local process = Process.run( cmd )
      if (process.success)
        @assets = JSON.parse( process.output_string )
      else
        @assets = @[]
      endIf

      return @assets

    method build
      # Attempts to automatically figure out how build the downloaded & unpacked
      # archive and launches the appropriate commands.
      forEach (folder in File(".").listing(&folders,&ignore_hidden))
        if (File(folder/"Build.rogue").exists)
          execute "$ && rogo build" (cd_cmd(folder))
          archive_folder = folder
          return
        endIf
      endForEach

      if (not is_unpacked)
        # Most likely the script just didn't call unpack() yet.
        unpack
        is_unpacked = true
        build
      else
        throw error( "Unable to determine how to build $ after unpacking it."(url) )
      endIf

    method copy_executable( src_filepath:String, dest_filename=null:String )
      if (not dest_filename)
        dest_filename = app_name
      endIf
      if (System.is_windows) dest_filename .= with_suffix(".exe")

      create_folder( bin_folder )
      local dest_filepath = bin_folder/dest_filename

      #println "Copying $ -> $" (src_filepath,dest_filepath)
      File( dest_filepath ).delete
      File( src_filepath ).copy_to( dest_filepath )
      if (not System.is_windows) execute( "chmod u+x $" (File(dest_filepath).esc), &quiet )

    method create_folder( folder:String )
      #println "  " + folder
      File( folder ).create_folder
      if (not File(folder).is_folder)
        throw error( ''Error creating folder "$".''(folder) )
      endIf

    method dependency( package_name:String )
      if (System.is_windows)
        execute( "morlock.bat install --dependency " + package_name, &quiet )
      else
        execute( "morlock install --dependency " + package_name, &quiet )
      endIf

    method download->String
      println "Downloading $ v$" (name,version)
      execute( "curl -LfsS $ -o $" (url,File(archive_filename).esc), &quiet )
      if (not File(archive_filename).esc) throw error( "Error downloading " + url )
      return archive_filename

    method download_asset( asset_name:String, to_file=null:File? )->File
      forEach (asset in assets)
        if (FilePattern(asset_name).matches(asset//name->String))
          return download_asset( asset, to_file )
        endIf
      endForEach
      throw Error( "Failed to download binary asset '$'."(asset_name) )

    method download_asset( asset:Variant, to_file=null:File? )->File
      # asset
      #   One of the values in the 'assets' Variant list
      if (not to_file) to_file = File( asset//name->String )
      local url = "https://api.github.com/repos/brombres/windowsmedialibs/releases/assets/$"(asset//id->Int32)
      execute( ''curl -H "Accept: application/octet-stream" -LfsS $ -o $''(url,to_file.value.abs.esc), &quiet )
      if (to_file.value.exists) return to_file.value
      throw Error( "Failed to download binary asset '$'."(asset//name) )

    method error( message:String )->Error
      return PackageError( provider/app_name, message )

    method execute( cmd:String, &quiet )
      if (not quiet )println "> " + cmd
      if (0 != System.run(cmd))
        throw error( "Error executing:\n"+cmd )
      endIf

    method filename_for_url( url:String )->String
      local filename = File(url).filename
      contingent
        local ext = File(filename).extension
        sufficient (ext.equals("zip",&ignore_case))
        sufficient (ext.equals("tar",&ignore_case))
        sufficient (ext.equals("gz",&ignore_case))
        if (url.contains("tarball"))     filename += ".tar.gz"
        elseIf (url.contains("zipball")) filename += ".zip"
      endContingent
      return filename

    method handle_action
      which (action)
        case "install", "update"
          handle_install
        case "link"
          handle_link
        case "uninstall"
          handle_uninstall
        case "unlink"
          handle_unlink
        others
          on( action )
      endWhich

    method header( message:String )
      println "-" * Console.width.or_smaller(80)
      println message
      println "-" * Console.width.or_smaller(80)

    method handle_install
      if (install_folder)
        if (File(install_folder).exists and File(install_folder).listing.count > 0)
          if (action == "update") System.exit(0)
          throw error( "$ version $ is already installed."(name,version) )
        endIf

        try
          println "-" * Console.width.or_smaller(80)
          println "Installing $ v$" (app_name,version)
          println "-" * Console.width.or_smaller(80)
          #println "Creating install folder"
          create_folder( install_folder )
          create_folder( bin_folder )
          install
          File( File(install_folder).folder/"active_version.txt" ).save( version )

        catch (err:Error)
          File( install_folder ).delete
          throw err
        endTry

      else
        try
          println "-" * Console.width.or_smaller(80)
          println "Installing $" (app_name)
          println "-" * Console.width.or_smaller(80)
          install

        catch (err:Error)
          throw err
        endTry

      endIf

    method handle_link
      link

    method handle_unlink
      unlink

    method handle_uninstall
      if (File(install_folder).exists)
        header "Uninstalling $ version $"(name,version)
        unlink
        uninstall
        File( install_folder ).delete
        local v_file = File( package_folder/"active_version.txt" )
        if (v_file.exists and version == String(v_file).trimmed) v_file.delete
      elseIf (specified_version)
        throw error( "$ version $ is not installed." (name,version) )
      else
        throw error( "$ is not installed." (name) )
      endIf

      # Force Package recompile next time
      File( package_folder/"source_crc32.txt" ).delete

    method install
      # Override as needed.
      download
      unpack
      build
      install_executable

    method install_executable( default=null:String, windows=null:String, macos=null:String, linux=null:String,
        dest_filename=null:String, &link=true )
      local pattern : String
      if (System.is_macos)       pattern = which{ macos || default }
      elseIf (System.is_linux)   pattern = which{ linux || default }
      elseIf (System.is_windows) pattern = which{ windows || default }
      else                       pattern = default

      if (not pattern)
        if (File(archive_folder/"Build").is_folder)   pattern = "Build/*"
        elseIf (File(archive_folder/"bin").is_folder) pattern = "bin/*"
      endIf

      if (not pattern) throw error( "No filepath or pattern given for $."(System.os) )

      pattern = pattern.replacing( "$(OS)", System.os )

      local exe_list = File( archive_folder/pattern ).listing
      contingent
        sufficient (exe_list.count == 1)
        if (System.is_windows)
          exe_list.keep( (f)=>f.ends_with(".exe",&ignore_case) )
        else
          if (exe_list.find( (f)=>f.ends_with(System.os,&ignore_case) ))
            exe_list.keep( (f)=>f.ends_with(System.os,&ignore_case) )
          else
            exe_list.find( (f) with (app_name) => File(f).filename == app_name )
            exe_list.keep( (f) with (app_name) => File(f).filename == app_name )
          endIf
        endIf
        sufficient (exe_list.count == 1)

        throw error( "Cannot locate executable build product." )
      endContingent

      copy_executable( forEach in exe_list, dest_filename )
      if (link) this.link

    method link
      local exe_list = File( bin_folder/"*" ).listing
      forEach (exe in exe_list)
        local base_launcher = File(exe).filename.before_last(".exe",&ignore_case)
        local launcher = launcher_folder/base_launcher
        if (System.is_windows) launcher += ".bat"
        File( launcher ).delete
        println "Linking " + base_launcher
        if (System.is_windows)
          File( launcher ).save( ''@call $ %*''(File(File(exe).conventional_filepath).esc) )
        else
          local cmd = "ln -s $ $" (exe,launcher)
          execute( cmd, &quiet )
        endIf
      endForEach

    method on( action:String )
      throw error( "Package [$] does not implement '$'."(name,action) )

    method release( id:Int32, url:String, platforms=null:Platforms, version=null:String )
      # Registers a release with .tar.gz/.zip URL and version number.
      #
      # platforms
      #   Any combination of characters w, m, l (windows, mac, linux)
      #   If unspecified then .tar.gz implies "ml" and any other extension
      #   implies "wml". Mac and Linux will prefer .tar.gz over other extensions
      #   if multiple possibilities are given.
      #
      # version
      #   In the format "1", "1.0", "1.0.0", etc. Will be inferred from url
      #   if unspecified.
      if (not platforms)
        if (url.ends_with(".zip",&ignore_case) or url.contains("zipball",&ignore_case))
          platforms = Platforms.windows
        else
          platforms = Platforms.all
        endIf
      endIf

      if (not version)
        local lc = url.to_lowercase
        local span = lc.locate_pattern("v$(I)")
        contingent
          sufficient (span.exists)
          span = lc.locate_pattern("$(I).(I)")
          sufficient (span.exists)
          span = lc.locate_pattern("$(I)?(I)")
          sufficient (span.exists)
          span = lc.locate_pattern("$(I)")
          sufficient (span.exists)
          throw error( 'Cannot determine version number from release URL "$".'(url) )
        endContingent
        version = url.substring( span.value.index )
        local separator_index = span.value.index + span.value.count
        local separator = which{ (separator_index<url.count):url[separator_index] || '.' }
        local version = String()
        local found_numbers = false
        forEach (ch in version)
          if (ch == separator) version.print "."
          elseIf (ch.is_number) version.print ch; found_numbers = true
          elseIf (found_numbers) escapeForEach
        endForEach
        version = version.without_suffix('.')
      endIf

      releases.add @{ id, version, url, platforms:platforms->String, filename:filename_for_url(url) }

    method save_cache
      File( package_folder ).create_folder
      JSON.save( cache, File(package_folder/"cache.json") )

    method scan_repo_releases( min_version=null:String, max_version=null:String, platforms=null:Platforms )
      local info : Variant

      if (cache//repo_releases)
        info = cache//repo_releases
      elseIf (not max_version)
        # Just grab the latest release
        local url = "https://api.github.com/repos/$/$/releases/latest"(provider,repo)
        local cmd = ''curl -fsSL -H "Accept: application/vnd.github.v3+json" '' + url
        local process = Process.run( cmd )
        if (not process.success) throw Error( "Download failed: " + url )

        info = @[ JSON.parse( process.output_string ) ]
        assets = info.first//assets
        cache//repo_releases = info
        save_cache
      else
        # Get all releases so we can filter
        local url = "https://api.github.com/repos/$/$/releases"(provider,repo)
        local cmd = ''curl -fsSL -H "Accept: application/vnd.github.v3+json" '' + url
        local process = Process.run( cmd )
        if (not process.success) throw Error( "Download failed: " + url )

        info = JSON.parse( process.output_string )
        cache//repo_releases = info
        save_cache
      endIf

      forEach (release_info in info)
        local v = VersionNumber( release_info//tag_name->String.after_any("v") )
        contingent
          if (specified_version)
            sufficient (v == specified_version)
          else
            if (min_version and v < min_version) nextIteration
            if (max_version and v > max_version) nextIteration
          endIf
        satisfied
          release( release_info//id, release_info//tarball_url, which{platforms||Platforms.unix}, v )
          release( release_info//id, release_info//zipball_url, which{platforms||Platforms.unix+Platforms.windows}, v )
          if (specified_version and v == specified_version) escapeForEach
        endContingent
      endForEach

    method select_version
      if (releases.is_empty) throw error( "No releases are available." )

      local platform = which{ System.is_windows:'w' || System.is_macos:'m' || 'l' }

      if (String.exists(version))
        local best = Best<<String>>( (a,b) => VersionNumber(a) > b )
        forEach (release in releases)
          local v = release//version->String
          if (VersionNumber(version).is_compatible_with(v)) best.consider( v )
        endForEach
        if (not best.exists)
          local builder = String()
          builder.println "No release is compatible with requested version '$'. Available versions:" (version)
          local compatible = @{}
          forEach (release in releases)
            if (release//platforms->String.contains(platform))
              compatible[ release//version ] = release//version
            endIf
          endForEach
          block compatible = compatible.to_list<<String>>.[ sort( (a,b) => VersionNumber(a) > b ) ]
            builder.println "  " + (forEach in compatible)
          endBlock
          throw error( builder )
        endIf
        version = best.value

      else
        local best = Best<<String>>( (a,b) => VersionNumber(a) > b )
        forEach (release in releases)
          local v = release//version->String
          best.consider( v )
        endForEach
        version = best.value

      endIf

      # Now pick the best URL with the given version number
      url = null
      forEach (release in releases)
        if (VersionNumber(release//version) == version and release//platforms->String.contains(platform))
          release_id = release//id
          url = release//url
          archive_filename = release//filename
          if (not System.is_windows)
            if (url.ends_with(".tar.gz",&ignore_case)) escapeForEach
            if (url.contains("tarball")) escapeForEach
          endIf
        endIf
      endForEach
      if (not archive_filename) throw error( "No releases available." )

      install_folder = package_folder/version
      bin_folder = install_folder/"bin"

    method uninstall

    method unlink
      local exe_list = File( bin_folder/"*" ).listing
      forEach (exe in exe_list)
        local base_launcher = File(exe).filename.before_last(".exe",&ignore_case)
        local launcher = launcher_folder/base_launcher
        if (System.is_windows) launcher += ".bat"
        println "Unlinking " + base_launcher
        File( launcher ).delete
      endForEach

    method unpack( destination_folder=".":String )
      if (not File(archive_filename).exists)
        throw error( "[INTERNAL] Must call download() before unpack()." )
      endIf

      is_unpacked = true
      if (archive_filename.ends_with(".zip",&ignore_case))
        Zip( File(archive_filename) ).extract( destination_folder )
      elseIf (archive_filename.ends_with(".tar.gz"))
        execute "tar -C $ -xf $" (File(destination_folder).esc,File(archive_filename).esc)
      else
        throw error( "Cannot unpack() file type '.$'; write custom install() code to handle it." )
      endIf
endClass

class PackageError( package_name:String, message ) : Error
  METHODS
    method description->String
      local builder = String()
      local w1 = longest_line
      local w2 = Console.width
      local w = w1.or_larger(80).or_smaller( w2 )
      local hr = "=" * w
      builder.println hr
      builder.println "ERROR [$]\n" (package_name)
      builder.println message
      builder.println hr
      return builder

    method longest_line->Int32
      local longest = 0
      local cur = 0

      forEach (ch in message)
        which (ch)
          case '\r': nextIteration
          case '\n': longest .= or_larger(cur); cur = 0
          others:    ++cur
        endWhich
      endForEach

      return longest.or_larger( cur )
endClass

class Platforms
  GLOBAL METHODS
    method all->Platforms
      return Platforms("wml")

    method linux->Platforms
      return Platforms( "l" )

    method macos->Platforms
      return Platforms( "m" )

    method unix->Platforms
      return Platforms( "ml" )

    method windows->Platforms
      return Platforms( "w" )

  PROPERTIES
    combined : String

  METHODS
    method init( combined=null, &windows, &macos, &linux )
      if (not combined) combined = ""
      if (windows and not combined.contains('w')) combined += 'w'
      if (macos and not combined.contains('m')) combined += 'm'
      if (linux and not combined.contains('l')) combined += 'l'
      if (combined == "") combined = "wml"

    method includes_linux->Logical
      return combined.contains('l')

    method includes_macos->Logical
      return combined.contains('m')

    method includes_unix->Logical
      return includes_macos or includes_linux

    method includes_windows->Logical
      return combined.contains('w')

    method is_defined->Logical
      return (combined.count > 0)

    method operator+( other:Platforms )->Platforms
      return this | other

    method operator|( other:Platforms )->Platforms
      local combo = combined
      forEach (ch in other.combined)
        if (not combo.contains(ch)) combo += ch
      endForEach
      return Platforms(combo)

    method to->String
      return combined
endClass

routine cd_cmd( folder:String )->String
  folder = File(folder).abs.esc
  local cmd = "cd $"(folder)
  if (not System.is_windows or folder.count < 2 or folder[1] != ':') return cmd # 'cd ...'
  cmd = "$ && $"(folder.leftmost(2),cmd) # Windows drive letter, e.g. 'C: && cd C:...'
  return cmd
endRoutine
